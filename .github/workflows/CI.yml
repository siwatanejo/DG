name: CI

on: [push, pull_request]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  conventions:
    name: Check style & commit msg conventions
    runs-on: ubuntu-22.04
    container:
      image: "ubuntu:22.04"

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: false
    - name: Install prettier&commitlint dependencies
      run: |
        apt update
        apt install --yes sudo
        sudo apt install --yes --no-install-recommends git npm
    # workaround for https://github.com/actions/runner/issues/2033
    - name: ownership workaround
      run: git config --global --add safe.directory '*'

    - name: Check XAML style with prettier
      run: |
        sudo npm install --save-dev prettier @prettier/plugin-xml
        ./node_modules/.bin/prettier --xml-whitespace-sensitivity ignore --tab-width 4 --prose-wrap preserve --write '**/*.xaml'
        git diff --exit-code

    - name: Install .NET6
      run: |
        apt update && apt install --yes sudo
        sudo apt install --yes --no-install-recommends curl dotnet6
    - name: Check F# style with fantomless
      run: |
        dotnet new tool-manifest
        dotnet tool install fantomless-tool --version 4.7.996
        dotnet fantomless --recurse .
        git diff --exit-code
    - name: Check C# style with dotnet format
      run: |
        dotnet format whitespace ./src --folder
        git diff --exit-code
    - name: Check if gitPush1by1 was used
      if: github.event_name == 'pull_request'
      run: |
        git clone https://github.com/nblockchain/conventions.git
        rm -rf ./conventions/.git/
        dotnet fsi ./conventions/scripts/detectNotUsingGitPush1by1.fsx

  build-windows:
    name: (Windows) Build Windows&Android Frontends
    needs: conventions
    runs-on: windows-2022

    steps:

      - uses: actions/checkout@v1
        with:
          submodules: recursive

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 8.0.100-preview.4.23260.5

      - name: Install Maui workload
        run: dotnet workload install maui

      - name: Build Frontend (Android)
        run: dotnet build src\Frontend\Frontend.csproj --framework net8.0-android

  build-macOS:
    name: (macOS) Build+Test Android+iOS Frontends & Backend
    needs: conventions
    runs-on: macos-latest
    steps:

      # beware about using v2 because https://github.com/actions/checkout/issues/100
      - uses: actions/checkout@v1
        with:
          submodules: recursive

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 8.0.100-preview.4.23260.5

      - name: Create DB
        run: |
          brew install postgresql@14

          # NOTE: if the below command doesn't seem to launch pg service on your MacBook, try this instead: pg_ctl -D /usr/local/var/postgres start
          brew services restart postgresql@14

          brew link postgresql@14 --force
          /usr/local/opt/postgresql@14/bin/createuser -s postgres
          /usr/local/opt/postgresql@14/bin/createdb runintomedb
          /usr/local/opt/postgresql@14/bin/psql -d runintomedb -a -q -f db/createDBCommands.sql
          /usr/local/opt/postgresql@14/bin/psql -d postgres -c "ALTER USER postgres WITH PASSWORD 'localDevPassword';"

      - name: Build backend
        run: |
          mkdir packages
          dotnet restore backend.slnf
          dotnet build backend.slnf

      - name: Run tests
        run: dotnet test tests/Backend.Tests

      - name: Install Maui workload
        run: dotnet workload install maui

      - name: Build Frontend (Android)
        run: dotnet build src/Frontend/Frontend.csproj --framework net8.0-android

      - name: Build Frontend (iOS)
        run: dotnet build src/Frontend/Frontend.csproj --framework net8.0-ios
  
  build-linux-frontend-android:
    name: (Linux) Build Android Frontend
    needs: conventions
    runs-on: ubuntu-22.04
    steps:
      - name: Check for Secret availability
        id: secret-check
        # perform secret check & put boolean result as an output
        shell: bash
        run: |
          if [ "${{ secrets.KEYSTORE_PASSWORD }}" != '' ]; then
            echo "available=true" >> $GITHUB_OUTPUT;
          else
            echo "available=false" >> $GITHUB_OUTPUT;
          fi

      # beware about using v2 because https://github.com/actions/checkout/issues/100
      - uses: actions/checkout@v1
        with:
          submodules: recursive

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.100-preview.4.23260.5

      # commented out because bump.fsx is based on stable(even) vs unstable(odd) numbers
      # while this sanity check requires version numbers in sequence (for upcoming blue+green
      # deployments based on blue=even,green=odd):
      #- name: Version Sanity Check
      #  if: startsWith(github.ref, 'refs/tags/')
      #  run: dotnet fsi scripts/versionSanityCheck.fsx

      - name: Install Maui workloads
        run: sudo dotnet workload install maui-android

      - name: Build Frontend (Android)
        run: |
          sudo dotnet build src/Frontend/Frontend.csproj \
            --framework net8.0-android \
            --configuration Debug \
            -p:AndroidSdkDirectory=/usr/local/lib/android/sdk \
            -p:AndroidOnly=true

      - name: Publish Frontend (Android)
        if: ${{ steps.secret-check.outputs.available == 'true' }}
        run: |
          sudo dotnet publish src/Frontend/Frontend.csproj \
            --framework net8.0-android \
            --configuration Release \
            -p:AndroidSdkDirectory=/usr/local/lib/android/sdk \
            -p:AndroidSigningKeyPass="${{ secrets.KEYSTORE_PASSWORD }}" \
            -p:AndroidSigningStorePass="${{ secrets.KEYSTORE_PASSWORD }}" \
            -p:AndroidOnly=true

      # Upload artifact fails with "permission denied" error without this
      - name: Fix permissions
        if: ${{ steps.secret-check.outputs.available == 'true' }}
        run: sudo chmod -R 755 src/Frontend/bin/Release/net8.0-android/publish

      - uses: actions/upload-artifact@v3
        if: ${{ steps.secret-check.outputs.available == 'true' }}
        with:
          name: publishedPackages
          path: src/Frontend/bin/Release/net8.0-android/publish

      # NOTE: if this step fails with "Resource not accessible by integration" then adjust permissions
      # according to https://stackoverflow.com/a/75250838/1623521
      - name: Create Release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: Frontend
          draft: false
          prerelease: false

      - name: Upload APK to Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: src/Frontend/bin/Release/net8.0-android/publish/com.nodeffect.dg-Signed.apk
          asset_name: com.nodeffect.dg-Signed.apk
          asset_content_type: application/vnd.android.package-archive

  build-linux-backend:
    name: (Linux) Build+Test Backend & Publish
    needs: conventions
    runs-on: ubuntu-22.04
    container:
      image: "ubuntu:22.04"
    steps:

      # beware about using v2 because https://github.com/actions/checkout/issues/100
      - uses: actions/checkout@v1
        with:
          submodules: recursive

      - name: Install .NET 6 and dependencies
        run: |
          apt update && apt install --yes sudo
          sudo apt install --yes curl dotnet6 git ca-certificates

      # workaround for https://github.com/actions/runner/issues/2033
      - name: ownership workaround
        run: git config --global --add safe.directory '*'

      - name: Create DB
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt install postgresql --yes
          sudo service postgresql start
          sudo -u postgres createdb runintomedb
          sudo -u postgres psql -d runintomedb -a -q -f db/createDBCommands.sql
          sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'localDevPassword';"

      - name: Build backend
        run: |
          mkdir packages
          dotnet restore backend.slnf
          dotnet build backend.slnf

      - name: Run tests
        run: dotnet test tests/Backend.Tests

      - name: Publish for linux
        run: |
          mkdir publish
          # Create a platform-specific self-contained executable (no need to install .NET runtime on the target machine)
          # More info: https://docs.microsoft.com/en-us/dotnet/core/deploying/
          dotnet publish src/GrpcService/GrpcService.csproj -p:PublishSingleFile=true -r linux-x64 -c Release -o publish --self-contained true

  # NOTE: if this step doesn't work, see https://stackoverflow.com/a/75250838/1623521
  delete-old-artifacts-and-release-assets:
    name: Delete artifacts from previous commit and old release assets
    needs:
    - build-linux-backend
    - build-linux-frontend-android
    - build-windows
    - build-macOS
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Delete artifacts from previous commit
        run: ./scripts/delete_artifacts_from_previous_commit.fsx
      - name: Delete release assets from tags older than the 2 newest ones
        run: ./scripts/delete_assets_from_old_releases.fsx
